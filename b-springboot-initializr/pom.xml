<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.4.1</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>
    <groupId>com.jiehfut</groupId>
    <artifactId>b-springboot-initializr</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>b-springboot-initializr</name>
    <description>b-springboot-initializr</description>
    <url/>
    <licenses>
        <license/>
    </licenses>
    <developers>
        <developer/>
    </developers>
    <scm>
        <connection/>
        <developerConnection/>
        <tag/>
        <url/>
    </scm>
    <properties>
        <java.version>17</java.version>
    </properties>
    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-thymeleaf</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.mysql</groupId>
            <artifactId>mysql-connector-j</artifactId>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
        </dependency>
        <!--三方 jar 包需要自己引入-->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>druid</artifactId>
            <version>1.2.20</version>
        </dependency>
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>druid</artifactId>
            <version>1.2.20</version>
        </dependency>
        <!--
            导入 redis 场景为例，导入该场景以后 RedisAutoConfiguration 自动配置类就注入容器中了
            与 redis 有关配置 @EnableConfigurationProperties(RedisProperties.class)
            @EnableConfigurationProperties(RedisProperties.class)
            @Import({ LettuceConnectionConfiguration.class, JedisConnectionConfiguration.class })
            public class RedisAutoConfiguration {

            @ConfigurationProperties(prefix = "spring.data.redis")
            public class RedisProperties {...}
            看到与 redis 有关的配置信息都是以 spring.data.redis 开头

            自动注入 redis 相关组件，就可以对 redis 进行增删改查操作



            1.选择场景：spring-boot-starter-data-redis
                RedisAutoConfiguration 就是这个场景的自动配置类
            2.写配置信息
                分析这个场景的自动配置类开启了哪些属性绑定关系
                @EnableConfigurationProperties(RedisProperties.class)
                在这个 RedisProperties 配置类中可以看到配置文件绑定了哪些信息
                可以在配置文件中修改相关的配置
            3.分析组件
                分析 RedisAutoConfiguration 给容器中注入了哪些组件，如 StringRedisTemplate
                可以在业务代码中自动装配 StringRedisTemplate
            4.定制化
                如果自动配置类向容器中注入的组件不是我们需要的，一般来说组件有 @ConditionalOnMissingBean 注解声明
                当容器中没有该类型组件时候才会注入
                所以我们可以自己自定义该类型的组件，注入该组件后，自动配置类就不会注入

        -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-redis</artifactId>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>

</project>
